/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/internal/games/v1/{game}/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a game's profile
         * @description Get a game's displayable profile
         */
        get: operations["get-game-profile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reset password
         * @description Given a 2FA TOTP code, changes the user's password and signs them into their account
         */
        get: operations["reset-password"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/send-password-reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Send password reset
         * @description Send a 2FA TOTP code to the email associated with the slug, to use with /reset-password
         */
        get: operations["send-password-reset"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/send-slug-reminder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Send slug reminder
         * @description Send an email to the email provided containing a list of all users associated with the email
         */
        get: operations["send-slug-reminder"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/session/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get session summary
         * @description Get details about the current authenticated session and the associated user
         */
        get: operations["get-session"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/session/add-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add an email
         * @description Sends a confirmation to the email; once confirmed by /confirm-email, the email will be associated with the current session's user
         */
        post: operations["add-email"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/session/confirm-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Confirm an email
         * @description Validates an email confirmation TOTP; if successful, the email will be marked as verified
         */
        post: operations["confirm-email"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/session/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user's profile
         * @description Get profile of current authenticated user
         */
        get: operations["get-session-profile"];
        put?: never;
        /**
         * Update user's profile
         * @description Update profile of current authenticated user
         */
        post: operations["update-session-profile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/session/profile/avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update user's avatar
         * @description Update avatar of current authenticated user. The avatar must be padded-base64-encoded PNG data. The image can be at most 1 MB, with a size between 64x64 and 512x512 pixels.
         */
        post: operations["update-session-avatar"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/session/remove-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove an email
         * @description Un-associated the current user's email
         */
        post: operations["remove-email"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/session/replace-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change user's password
         * @description Changes the current session user's password
         */
        post: operations["replace-password"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/session/sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sign in
         * @description Sign into a new session as an existing user
         */
        post: operations["sign-in"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/session/sign-out": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sign out
         * @description Sign out of the current session, and invalidate the session token
         */
        post: operations["sign-out"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/session/sign-up": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sign up
         * @description Create a new user and sign into a new session as the new user
         */
        post: operations["sign-up"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/session/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user's tokens
         * @description Get all of the current user's tokens
         */
        get: operations["get-game-tokens"];
        put?: never;
        /**
         * Create a new token
         * @description Create a new token for the current user
         */
        post: operations["create-game-token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/session/tokens/{tokenRID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Invalidate a token
         * @description Invalidate one of the current user's tokens
         */
        delete: operations["delete-game-token"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/users/v1/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search users
         * @description Search all users by various criteria
         */
        get: operations["search-users"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/users/v1/{user}/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a user's profile
         * @description Get a user's displayable profile
         */
        get: operations["get-user-profile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/avatars/{group}/{avatar}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an avatar image
         * @description Retrieves an avatar image. This endpoint only exists when running in a local environment, and is not intended to be invoked explicitly. You should always use the URL returned by other responses such as `User.AvatarUrl`.
         */
        get: operations["media-avatars"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/readyz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Readiness
         * @description Get whether or not the API is ready to process requests
         */
        get: operations["readyz"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/v1/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get users
         * @description Search all users by various criteria
         */
        get: operations["users-search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/v1/{user}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user
         * @description Get a user by RID, or get the user associated with the Game Token if @me is provided instead of an RID
         */
        get: operations["users-get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/v1/{user}/games/{game}/achievements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a user's achievements
         * @description Get a user's achievement progress for the game associated with the session
         */
        get: operations["users-get-achievements"];
        put?: never;
        /**
         * Add achievement progress
         * @description Add new progress to one or multiple achievements for a particular user. Any progress that's lower than the user's current progress for the associated achievement will be ignored.
         */
        post: operations["users-game-session-set-progress"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/v1/{user}/games/{game}/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a game session
         * @description Create a new game session. Game Sessions are used to track playtime, stats, and achievements.
         */
        post: operations["users-create-game-session"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/v1/{user}/games/{game}/sessions/{session}/heartbeat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh the game session
         * @description Refresh the game session. Update the session's last pulse, and generate a new game session token if the expiration is too close.
         */
        post: operations["users-game-session-heartbeat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Avatar: {
            readonly blurhash: string;
            readonly url: string;
        };
        ChangePasswordInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/ChangePasswordInputBody.json
             */
            readonly $schema?: string;
            currentPassword: string;
            newPassword: string;
        };
        ConfirmEmailInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/ConfirmEmailInputBody.json
             */
            readonly $schema?: string;
            code: string;
            /** Format: email */
            email: string;
        };
        Developer: {
            readonly friendlyName: string;
        };
        EmailValidationResult: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/EmailValidationResult.json
             */
            readonly $schema?: string;
            validated: boolean;
        };
        ErrorDetail: {
            /** @description Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id' */
            location?: string;
            /** @description Error message text */
            message?: string;
            /** @description The value at the given location */
            value?: unknown;
        };
        ErrorModel: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/ErrorModel.json
             */
            readonly $schema?: string;
            /**
             * @description A human-readable explanation specific to this occurrence of the problem.
             * @example Property foo is required but is missing.
             */
            detail?: string;
            /** @description Optional list of individual error details */
            errors?: components["schemas"]["ErrorDetail"][] | null;
            /**
             * Format: uri
             * @description A URI reference that identifies the specific occurrence of the problem.
             * @example https://example.com/error-log/abc123
             */
            instance?: string;
            /**
             * Format: int64
             * @description HTTP status code
             * @example 400
             */
            status?: number;
            /**
             * @description A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
             * @example Bad Request
             */
            title?: string;
            /**
             * Format: uri
             * @description A URI reference to human-readable documentation for the error.
             * @default about:blank
             * @example https://example.com/errors/example
             */
            type: string;
        };
        Game: {
            /**
             * Unix Epoch Time
             * Format: unix-time
             * @description Unsigned 64-bit integer of the number of milliseconds since Junuary 1st, 1997 12:00 AM
             * @example 1755126366000
             */
            readonly createdAt: string;
            /**
             * RID
             * Format: rid
             * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
             * @example u_AZhjuMmhePWkHFALenFEfg
             */
            readonly rid: string;
            slug: string;
        };
        GameProfile: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/GameProfile.json
             */
            readonly $schema?: string;
            achievements?: components["schemas"]["GameProfileAchievement"][] | null;
            game: components["schemas"]["InternalGame"];
            recentAchievements?: components["schemas"]["GameProfileRecentAchievements"][] | null;
            recentCompletionists?: components["schemas"]["GameProfileRecentCompletionists"][] | null;
        };
        GameProfileAchievement: {
            description: string;
            name: string;
            /** Format: double */
            rarity: number;
            slug: string;
        };
        GameProfileRecentAchievements: {
            readonly description: string;
            readonly name: string;
            /** Format: double */
            readonly rarity: number;
            readonly slug: string;
            readonly user: components["schemas"]["InternalUser"];
        };
        GameProfileRecentCompletionists: {
            /** Format: date-time */
            readonly unlockedAt: string;
            readonly user: components["schemas"]["InternalUser"];
        };
        GameSession: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/GameSession.json
             */
            readonly $schema?: string;
            readonly game: components["schemas"]["Game"];
            /**
             * Unix Epoch Time
             * Format: unix-time
             * @description Unsigned 64-bit integer of the number of milliseconds since Junuary 1st, 1997 12:00 AM
             * @example 1755126366000
             */
            readonly lastPulse: string;
            /**
             * Format: int64
             * @description the number of seconds before your next heartbeat. Always send your next heartbeat close to this amount of time after the response is received, otherwise the API cannot guarantee that the JWT will continue to be valid for the next heartbeat.
             */
            readonly nextPulseAfter: number;
            /**
             * RID
             * Format: rid
             * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
             * @example u_AZhjuMmhePWkHFALenFEfg
             */
            readonly rid: string;
            readonly user: components["schemas"]["User"];
        };
        GameToken: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/GameToken.json
             */
            readonly $schema?: string;
            comment: string;
            /** Format: date-time */
            readonly createdAt: string;
            /** Format: date-time */
            expiresAt: string;
            game: components["schemas"]["InternalGame"];
            /**
             * RID
             * Format: rid
             * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
             * @example u_AZhjuMmhePWkHFALenFEfg
             */
            readonly rid: string;
        };
        GameTokenList: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/GameTokenList.json
             */
            readonly $schema?: string;
            tokens: components["schemas"]["GameToken"][] | null;
        };
        InternalGame: {
            readonly developer?: components["schemas"]["Developer"];
            readonly friendlyName: string;
            /**
             * RID
             * Format: rid
             * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
             * @example u_AZhjuMmhePWkHFALenFEfg
             */
            rid: string;
        };
        InternalUser: {
            readonly avatar?: components["schemas"]["Avatar"];
            bioText?: string;
            /** Format: date-time */
            readonly createdAt?: string;
            displayName?: string;
            /**
             * RID
             * Format: rid
             * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
             * @example u_AZhjuMmhePWkHFALenFEfg
             */
            readonly rid: string;
            slug?: string;
        };
        InternalUserList: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/InternalUserList.json
             */
            readonly $schema?: string;
            users: components["schemas"]["InternalUser"][] | null;
        };
        ProfileCompletedGame: {
            /**
             * Format: int64
             * @description The number of achievements necessary to complete this game
             */
            readonly achievementCount: number;
            readonly game: components["schemas"]["ProfileGame"];
        };
        ProfileGame: {
            readonly avatarUrl: string;
            readonly name: string;
            /**
             * RID
             * Format: rid
             * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
             * @example u_AZhjuMmhePWkHFALenFEfg
             */
            readonly rid: string;
        };
        ProfileOtherUserUnlockedAchievement: {
            /** @description The description of the achievement that was unlocked */
            readonly description: string;
            readonly game: components["schemas"]["ProfileGame"];
            /** @description The name of the achievement that was unlocked */
            readonly name: string;
            /** @description The slug of the achievement that was unlocked */
            readonly slug: string;
            readonly user: components["schemas"]["InternalUser"];
        };
        ProfileRareAchievement: {
            readonly description: string;
            readonly game: components["schemas"]["ProfileGame"];
            readonly name: string;
            /**
             * Format: double
             * @description Of players who have ever played this achievement's game, the fraction who have completed this achievement
             */
            readonly rarity: number;
            readonly slug: string;
        };
        ProfileUnlockedAchievement: {
            /** @description The description of the achievement that was unlocked */
            readonly description: string;
            readonly game: components["schemas"]["ProfileGame"];
            /** @description The name of the achievement that was unlocked */
            readonly name: string;
            /** @description The slug of the achievement that was unlocked */
            readonly slug: string;
        };
        Registration: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/Registration.json
             */
            readonly $schema?: string;
            displayName?: string | null;
            /** Format: email */
            email: string;
            readonly emailConfirmationSent?: boolean;
            password: string;
            /** Format: slug */
            slug: string;
        };
        RemoveEmailInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/RemoveEmailInputBody.json
             */
            readonly $schema?: string;
            /** Format: email */
            email: string;
        };
        ResetPasswordInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/ResetPasswordInputBody.json
             */
            readonly $schema?: string;
            code: string;
            password: string;
            slug: string;
        };
        SendEmailConfInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/SendEmailConfInputBody.json
             */
            readonly $schema?: string;
            /** Format: email */
            email: string;
        };
        SendPasswordResetInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/SendPasswordResetInputBody.json
             */
            readonly $schema?: string;
            slug: string;
        };
        SendSlugReminderInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/SendSlugReminderInputBody.json
             */
            readonly $schema?: string;
            /** Format: email */
            email: string;
        };
        SessionResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/SessionResponseBody.json
             */
            readonly $schema?: string;
            displayName: string;
            slug: string;
        };
        SignInBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/SignInBody.json
             */
            readonly $schema?: string;
            /**
             * Format: email
             * @description mutually exclusive with slug
             */
            email: string;
            password: string;
            /**
             * Format: slug
             * @description mutually exclusive with email
             */
            slug: string;
        };
        User: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/User.json
             */
            readonly $schema?: string;
            readonly avatar?: components["schemas"]["Avatar"];
            bioText?: string;
            /**
             * Unix Epoch Time
             * Format: unix-time
             * @description Unsigned 64-bit integer of the number of milliseconds since Junuary 1st, 1997 12:00 AM
             * @example 1755126366000
             */
            readonly createdAt: string;
            displayName?: string;
            email?: string;
            password?: string;
            /**
             * RID
             * Format: rid
             * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
             * @example u_AZhjuMmhePWkHFALenFEfg
             */
            readonly rid: string;
            slug: string;
        };
        UserList: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/UserList.json
             */
            readonly $schema?: string;
            users: components["schemas"]["User"][] | null;
        };
        UserProfile: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/UserProfile.json
             */
            readonly $schema?: string;
            /** @description The games this user has 100% completion in */
            readonly completedGames?: components["schemas"]["ProfileCompletedGame"][] | null;
            /** @description Most recent achievements unlocked by other users */
            readonly otherUserAchievements?: components["schemas"]["ProfileOtherUserUnlockedAchievement"][] | null;
            /** @description The rarest achievements unlocked by this user */
            readonly rarestAchievements?: components["schemas"]["ProfileRareAchievement"][] | null;
            /** @description Most recent achievements unlocked by this user */
            readonly unlockedAchievements?: components["schemas"]["ProfileUnlockedAchievement"][] | null;
            user: components["schemas"]["InternalUser"];
        };
        UserProgress: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/UserProgress.json
             */
            readonly $schema?: string;
            /** @description a map of slugs to the user's current progress in the associated achievement' */
            progress: {
                [key: string]: number;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type Avatar = components['schemas']['Avatar'];
export type ChangePasswordInputBody = components['schemas']['ChangePasswordInputBody'];
export type ConfirmEmailInputBody = components['schemas']['ConfirmEmailInputBody'];
export type Developer = components['schemas']['Developer'];
export type EmailValidationResult = components['schemas']['EmailValidationResult'];
export type ErrorDetail = components['schemas']['ErrorDetail'];
export type ErrorModel = components['schemas']['ErrorModel'];
export type Game = components['schemas']['Game'];
export type GameProfile = components['schemas']['GameProfile'];
export type GameProfileAchievement = components['schemas']['GameProfileAchievement'];
export type GameProfileRecentAchievements = components['schemas']['GameProfileRecentAchievements'];
export type GameProfileRecentCompletionists = components['schemas']['GameProfileRecentCompletionists'];
export type GameSession = components['schemas']['GameSession'];
export type GameToken = components['schemas']['GameToken'];
export type GameTokenList = components['schemas']['GameTokenList'];
export type InternalGame = components['schemas']['InternalGame'];
export type InternalUser = components['schemas']['InternalUser'];
export type InternalUserList = components['schemas']['InternalUserList'];
export type ProfileCompletedGame = components['schemas']['ProfileCompletedGame'];
export type ProfileGame = components['schemas']['ProfileGame'];
export type ProfileOtherUserUnlockedAchievement = components['schemas']['ProfileOtherUserUnlockedAchievement'];
export type ProfileRareAchievement = components['schemas']['ProfileRareAchievement'];
export type ProfileUnlockedAchievement = components['schemas']['ProfileUnlockedAchievement'];
export type Registration = components['schemas']['Registration'];
export type RemoveEmailInputBody = components['schemas']['RemoveEmailInputBody'];
export type ResetPasswordInputBody = components['schemas']['ResetPasswordInputBody'];
export type SendEmailConfInputBody = components['schemas']['SendEmailConfInputBody'];
export type SendPasswordResetInputBody = components['schemas']['SendPasswordResetInputBody'];
export type SendSlugReminderInputBody = components['schemas']['SendSlugReminderInputBody'];
export type SessionResponseBody = components['schemas']['SessionResponseBody'];
export type SignInBody = components['schemas']['SignInBody'];
export type User = components['schemas']['User'];
export type UserList = components['schemas']['UserList'];
export type UserProfile = components['schemas']['UserProfile'];
export type UserProgress = components['schemas']['UserProgress'];
export type $defs = Record<string, never>;
export interface operations {
    "get-game-profile": {
        parameters: {
            query: {
                /**
                 * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
                 * @example u_AZhjuMmhePWkHFALenFEfg
                 */
                game: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameProfile"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetPasswordInputBody"];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "send-password-reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendPasswordResetInputBody"];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "send-slug-reminder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendSlugReminderInputBody"];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionResponseBody"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "add-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendEmailConfInputBody"];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "confirm-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfirmEmailInputBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailValidationResult"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-session-profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfile"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-session-profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserProfile"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfile"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-session-avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "image/png": string;
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    Location?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "remove-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RemoveEmailInputBody"];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "replace-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangePasswordInputBody"];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInBody"];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    "Set-Cookie"?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "sign-out": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    "Set-Cookie"?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "sign-up": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Registration"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "Set-Cookie"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Registration"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-game-tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameTokenList"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-game-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GameToken"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameToken"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-game-token": {
        parameters: {
            query?: {
                /**
                 * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
                 * @example gt_31F0otb4FIVRqQWdsISFl
                 */
                tokenRID?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "search-users": {
        parameters: {
            query: {
                slugLike: string;
                /**
                 * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
                 * @example u_AZhjuMmhePWkHFALenFEfg
                 */
                after?: string;
                /** @description default = 10 */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalUserList"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-user-profile": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
                 * @example u_AZhjuMmhePWkHFALenFEfg
                 */
                user: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfile"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "media-avatars": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                group: string;
                avatar: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The contents will be an image */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "image/png": unknown;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    readyz: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    OK?: boolean;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "users-search": {
        parameters: {
            query: {
                slugLike: string;
                /**
                 * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
                 * @example u_AZhjuMmhePWkHFALenFEfg
                 */
                after?: string;
                /** @description default = 10 */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserList"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "users-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "users-get-achievements": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
                 * @example u_AZhjuMmhePWkHFALenFEfg
                 */
                user: string;
                /**
                 * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
                 * @example u_AZhjuMmhePWkHFALenFEfg
                 */
                game: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProgress"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "users-game-session-set-progress": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
                 * @example u_AZhjuMmhePWkHFALenFEfg
                 */
                user: string;
                /**
                 * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
                 * @example u_AZhjuMmhePWkHFALenFEfg
                 */
                game: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserProgress"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProgress"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "users-create-game-session": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
                 * @example u_AZhjuMmhePWkHFALenFEfg
                 */
                user: string;
                /**
                 * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
                 * @example u_AZhjuMmhePWkHFALenFEfg
                 */
                game: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Game-Session-Token"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameSession"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "users-game-session-heartbeat": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
                 * @example u_AZhjuMmhePWkHFALenFEfg
                 */
                user: string;
                /**
                 * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
                 * @example u_AZhjuMmhePWkHFALenFEfg
                 */
                game: string;
                /**
                 * @description A type-safe UUID. Prefix indicates Resource type, suffix is a base62 encoded UUIDv7.
                 * @example u_AZhjuMmhePWkHFALenFEfg
                 */
                session: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-Game-Session-Token"?: string | null;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameSession"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
}
export enum ApiPaths {
    get_game_profile = "/internal/games/v1/{game}/profile",
    reset_password = "/internal/reset-password",
    send_password_reset = "/internal/send-password-reset",
    send_slug_reminder = "/internal/send-slug-reminder",
    get_session = "/internal/session/",
    add_email = "/internal/session/add-email",
    confirm_email = "/internal/session/confirm-email",
    get_session_profile = "/internal/session/profile",
    update_session_profile = "/internal/session/profile",
    update_session_avatar = "/internal/session/profile/avatar",
    remove_email = "/internal/session/remove-email",
    replace_password = "/internal/session/replace-password",
    sign_in = "/internal/session/sign-in",
    sign_out = "/internal/session/sign-out",
    sign_up = "/internal/session/sign-up",
    get_game_tokens = "/internal/session/tokens",
    create_game_token = "/internal/session/tokens",
    delete_game_token = "/internal/session/tokens/{tokenRID}",
    search_users = "/internal/users/v1/",
    get_user_profile = "/internal/users/v1/{user}/profile",
    media_avatars = "/media/avatars/{group}/{avatar}",
    readyz = "/readyz",
    users_search = "/users/v1/",
    users_get = "/users/v1/{user}",
    users_get_achievements = "/users/v1/{user}/games/{game}/achievements",
    users_game_session_set_progress = "/users/v1/{user}/games/{game}/achievements",
    users_create_game_session = "/users/v1/{user}/games/{game}/sessions",
    users_game_session_heartbeat = "/users/v1/{user}/games/{game}/sessions/{session}/heartbeat"
}

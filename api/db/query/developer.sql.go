// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: developer.sql

package query

import (
	"context"
	"time"
)

const allDevelopers = `-- name: AllDevelopers :many
select id, created_at, updated_at, uuid, slug from developer
`

func (q *Queries) AllDevelopers(ctx context.Context) ([]Developer, error) {
	rows, err := q.db.Query(ctx, allDevelopers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Developer
	for rows.Next() {
		var i Developer
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Uuid,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findDeveloperBySlug = `-- name: FindDeveloperBySlug :one
select id, created_at, updated_at, uuid, slug from developer where slug = $1 limit 1
`

func (q *Queries) FindDeveloperBySlug(ctx context.Context, slug string) (Developer, error) {
	row := q.db.QueryRow(ctx, findDeveloperBySlug, slug)
	var i Developer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Uuid,
		&i.Slug,
	)
	return i, err
}

const getDeveloperGames = `-- name: GetDeveloperGames :many
select game.slug, game.created_at from game where developer_id = $1
`

type GetDeveloperGamesRow struct {
	Slug      string
	CreatedAt time.Time
}

func (q *Queries) GetDeveloperGames(ctx context.Context, developerID int32) ([]GetDeveloperGamesRow, error) {
	rows, err := q.db.Query(ctx, getDeveloperGames, developerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeveloperGamesRow
	for rows.Next() {
		var i GetDeveloperGamesRow
		if err := rows.Scan(&i.Slug, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeveloperMembers = `-- name: GetDeveloperMembers :many
select u.slug, uldn.display_name, dm.created_at as joined_at
from users u
join developer_member dm on u.id = dm.user_id
left outer join user_latest_display_name uldn on u.id = uldn.user_id
where dm.developer_id = $1
`

type GetDeveloperMembersRow struct {
	Slug        string
	DisplayName *string
	JoinedAt    time.Time
}

func (q *Queries) GetDeveloperMembers(ctx context.Context, developerID int32) ([]GetDeveloperMembersRow, error) {
	rows, err := q.db.Query(ctx, getDeveloperMembers, developerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeveloperMembersRow
	for rows.Next() {
		var i GetDeveloperMembersRow
		if err := rows.Scan(&i.Slug, &i.DisplayName, &i.JoinedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

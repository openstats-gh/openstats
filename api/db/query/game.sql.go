// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: game.sql

package query

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const allGames = `-- name: AllGames :many
select game.id, game.created_at, game.updated_at, game.developer_id, game.uuid, game.slug, developer.slug as developer_slug
from game
     join developer on game.developer_id = developer.id
`

type AllGamesRow struct {
	ID            int32
	CreatedAt     time.Time
	UpdatedAt     time.Time
	DeveloperID   int32
	Uuid          uuid.UUID
	Slug          string
	DeveloperSlug string
}

func (q *Queries) AllGames(ctx context.Context) ([]AllGamesRow, error) {
	rows, err := q.db.Query(ctx, allGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllGamesRow
	for rows.Next() {
		var i AllGamesRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeveloperID,
			&i.Uuid,
			&i.Slug,
			&i.DeveloperSlug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findGame = `-- name: FindGame :one
select id, created_at, updated_at, developer_id, uuid, slug from game where uuid = $1 limit 1
`

func (q *Queries) FindGame(ctx context.Context, gameUuid uuid.UUID) (Game, error) {
	row := q.db.QueryRow(ctx, findGame, gameUuid)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeveloperID,
		&i.Uuid,
		&i.Slug,
	)
	return i, err
}

const findGameById = `-- name: FindGameById :one
select id, created_at, updated_at, developer_id, uuid, slug from game where id = $1 limit 1
`

func (q *Queries) FindGameById(ctx context.Context, gameID int32) (Game, error) {
	row := q.db.QueryRow(ctx, findGameById, gameID)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeveloperID,
		&i.Uuid,
		&i.Slug,
	)
	return i, err
}

const findGameBySlug = `-- name: FindGameBySlug :one
select game.id, game.created_at, game.updated_at, game.developer_id, game.uuid, game.slug
from game
     join developer on game.developer_id = developer.id
where game.slug = $1 and developer.slug = $2
`

type FindGameBySlugParams struct {
	GameSlug string
	DevSlug  string
}

func (q *Queries) FindGameBySlug(ctx context.Context, arg FindGameBySlugParams) (Game, error) {
	row := q.db.QueryRow(ctx, findGameBySlug, arg.GameSlug, arg.DevSlug)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeveloperID,
		&i.Uuid,
		&i.Slug,
	)
	return i, err
}

const getGameAchievements = `-- name: GetGameAchievements :many
select id, created_at, updated_at, game_id, slug, name, description, progress_requirement from achievement where game_id = $1
`

func (q *Queries) GetGameAchievements(ctx context.Context, gameID int32) ([]Achievement, error) {
	rows, err := q.db.Query(ctx, getGameAchievements, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Achievement
	for rows.Next() {
		var i Achievement
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GameID,
			&i.Slug,
			&i.Name,
			&i.Description,
			&i.ProgressRequirement,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGameProfile = `-- name: GetGameProfile :one
select g.slug,
       d.slug as developer_slug
from game g
     join developer d on g.developer_id = d.id
where g.uuid = $1
`

type GetGameProfileRow struct {
	Slug          string
	DeveloperSlug string
}

func (q *Queries) GetGameProfile(ctx context.Context, gameUuid uuid.UUID) (GetGameProfileRow, error) {
	row := q.db.QueryRow(ctx, getGameProfile, gameUuid)
	var i GetGameProfileRow
	err := row.Scan(&i.Slug, &i.DeveloperSlug)
	return i, err
}

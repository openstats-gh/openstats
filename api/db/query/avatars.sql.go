// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: avatars.sql

package query

import (
	"context"

	"github.com/google/uuid"
)

const addAchievementAvatar = `-- name: AddAchievementAvatar :one
insert into achievement_avatar (achievement_id, blurhash)
select a.id, $1
from game g
join achievement a on g.id = a.game_id
where g.uuid = $2 and a.slug = $3
returning id, created_at, uuid, blurhash, achievement_id
`

type AddAchievementAvatarParams struct {
	Blurhash        string
	GameUuid        uuid.UUID
	AchievementSlug string
}

func (q *Queries) AddAchievementAvatar(ctx context.Context, arg AddAchievementAvatarParams) (AchievementAvatar, error) {
	row := q.db.QueryRow(ctx, addAchievementAvatar, arg.Blurhash, arg.GameUuid, arg.AchievementSlug)
	var i AchievementAvatar
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Uuid,
		&i.Blurhash,
		&i.AchievementID,
	)
	return i, err
}

const addDeveloperAvatar = `-- name: AddDeveloperAvatar :one
insert into developer_avatar (developer_id, blurhash)
select d.id, $1 from developer d where d.uuid = $2
returning id, created_at, uuid, blurhash, developer_id
`

type AddDeveloperAvatarParams struct {
	Blurhash      string
	DeveloperUuid uuid.UUID
}

func (q *Queries) AddDeveloperAvatar(ctx context.Context, arg AddDeveloperAvatarParams) (DeveloperAvatar, error) {
	row := q.db.QueryRow(ctx, addDeveloperAvatar, arg.Blurhash, arg.DeveloperUuid)
	var i DeveloperAvatar
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Uuid,
		&i.Blurhash,
		&i.DeveloperID,
	)
	return i, err
}

const addGameAvatar = `-- name: AddGameAvatar :one
insert into game_avatar (game_id, blurhash)
select g.id, $1 from game g where g.uuid = $2
returning id, created_at, uuid, blurhash, game_id
`

type AddGameAvatarParams struct {
	Blurhash string
	GameUuid uuid.UUID
}

func (q *Queries) AddGameAvatar(ctx context.Context, arg AddGameAvatarParams) (GameAvatar, error) {
	row := q.db.QueryRow(ctx, addGameAvatar, arg.Blurhash, arg.GameUuid)
	var i GameAvatar
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Uuid,
		&i.Blurhash,
		&i.GameID,
	)
	return i, err
}

const addUserAvatar = `-- name: AddUserAvatar :one
insert into user_avatar (user_id, blurhash)
select u.id, $1 from users u where u.uuid = $2
returning id, created_at, uuid, blurhash, user_id
`

type AddUserAvatarParams struct {
	Blurhash string
	UserUuid uuid.UUID
}

func (q *Queries) AddUserAvatar(ctx context.Context, arg AddUserAvatarParams) (UserAvatar, error) {
	row := q.db.QueryRow(ctx, addUserAvatar, arg.Blurhash, arg.UserUuid)
	var i UserAvatar
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Uuid,
		&i.Blurhash,
		&i.UserID,
	)
	return i, err
}

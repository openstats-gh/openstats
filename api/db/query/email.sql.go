// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: email.sql

package query

import (
	"context"

	"github.com/google/uuid"
)

const addOrGetUserEmail = `-- name: AddOrGetUserEmail :one
insert into user_email(user_id, email)
values ($1, $2)
on conflict (user_id) do nothing
returning id, created_at, updated_at, user_id, email, confirmed_at
`

type AddOrGetUserEmailParams struct {
	UserID int32
	Email  string
}

func (q *Queries) AddOrGetUserEmail(ctx context.Context, arg AddOrGetUserEmailParams) (UserEmail, error) {
	row := q.db.QueryRow(ctx, addOrGetUserEmail, arg.UserID, arg.Email)
	var i UserEmail
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Email,
		&i.ConfirmedAt,
	)
	return i, err
}

const addUserEmailByUuid = `-- name: AddUserEmailByUuid :exec
with target_user as (
    select u.id from users u where u.uuid = $2
)
insert into user_email(user_id, email)
select tu.id, $1 from target_user tu
`

type AddUserEmailByUuidParams struct {
	Email    string
	UserUuid uuid.UUID
}

func (q *Queries) AddUserEmailByUuid(ctx context.Context, arg AddUserEmailByUuidParams) error {
	_, err := q.db.Exec(ctx, addUserEmailByUuid, arg.Email, arg.UserUuid)
	return err
}

const confirmEmail = `-- name: ConfirmEmail :one
update user_email
set confirmed_at = now()
where user_id = $1 and email = $2
returning id, created_at, updated_at, user_id, email, confirmed_at
`

type ConfirmEmailParams struct {
	UserID int32
	Email  string
}

func (q *Queries) ConfirmEmail(ctx context.Context, arg ConfirmEmailParams) (UserEmail, error) {
	row := q.db.QueryRow(ctx, confirmEmail, arg.UserID, arg.Email)
	var i UserEmail
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Email,
		&i.ConfirmedAt,
	)
	return i, err
}

const findUserEmailBySlug = `-- name: FindUserEmailBySlug :one
select ue.user_id, ue.email
from user_email ue
     join users u on ue.user_id = u.id
where u.slug = $1 and ue.confirmed_at is not null
`

type FindUserEmailBySlugRow struct {
	UserID int32
	Email  string
}

func (q *Queries) FindUserEmailBySlug(ctx context.Context, slug string) (FindUserEmailBySlugRow, error) {
	row := q.db.QueryRow(ctx, findUserEmailBySlug, slug)
	var i FindUserEmailBySlugRow
	err := row.Scan(&i.UserID, &i.Email)
	return i, err
}

const getSlugsByEmail = `-- name: GetSlugsByEmail :many
select u.slug
from users u
     join user_email ue on u.id = ue.user_id
where ue.email = $1 and ue.confirmed_at is not null
`

func (q *Queries) GetSlugsByEmail(ctx context.Context, email string) ([]string, error) {
	rows, err := q.db.Query(ctx, getSlugsByEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var slug string
		if err := rows.Scan(&slug); err != nil {
			return nil, err
		}
		items = append(items, slug)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserEmail = `-- name: GetUserEmail :one
select id, created_at, updated_at, user_id, email, confirmed_at
from user_email
where user_id = $1
`

func (q *Queries) GetUserEmail(ctx context.Context, userID int32) (UserEmail, error) {
	row := q.db.QueryRow(ctx, getUserEmail, userID)
	var i UserEmail
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Email,
		&i.ConfirmedAt,
	)
	return i, err
}

const removeEmail = `-- name: RemoveEmail :one
delete
from user_email
where user_id = $1 and email = $2
returning id, created_at, updated_at, user_id, email, confirmed_at
`

type RemoveEmailParams struct {
	UserID int32
	Email  string
}

func (q *Queries) RemoveEmail(ctx context.Context, arg RemoveEmailParams) (UserEmail, error) {
	row := q.db.QueryRow(ctx, removeEmail, arg.UserID, arg.Email)
	var i UserEmail
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Email,
		&i.ConfirmedAt,
	)
	return i, err
}

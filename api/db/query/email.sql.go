// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: email.sql

package query

import (
	"context"

	"github.com/google/uuid"
)

const addOrGetUserEmail = `-- name: AddOrGetUserEmail :one
with target_user as (
    select u.id from users u where u.uuid = $3
)
insert into user_email (user_id, email, otp_secret)
select tu.id, $1, $2 from target_user tu
on conflict (user_email_unique_idx) do nothing
returning id, created_at, user_id, email, otp_secret
`

type AddOrGetUserEmailParams struct {
	Email     string
	OtpSecret string
	UserUuid  uuid.UUID
}

func (q *Queries) AddOrGetUserEmail(ctx context.Context, arg AddOrGetUserEmailParams) (UserEmail, error) {
	row := q.db.QueryRow(ctx, addOrGetUserEmail, arg.Email, arg.OtpSecret, arg.UserUuid)
	var i UserEmail
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.Email,
		&i.OtpSecret,
	)
	return i, err
}

const getUserEmail = `-- name: GetUserEmail :one
select ue.id, ue.created_at, ue.user_id, ue.email, ue.otp_secret
from user_email ue
     join users u on ue.user_id = u.id
where u.uuid = $1 and ue.email = $2
`

type GetUserEmailParams struct {
	UserUuid uuid.UUID
	Email    string
}

func (q *Queries) GetUserEmail(ctx context.Context, arg GetUserEmailParams) (UserEmail, error) {
	row := q.db.QueryRow(ctx, getUserEmail, arg.UserUuid, arg.Email)
	var i UserEmail
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.Email,
		&i.OtpSecret,
	)
	return i, err
}

const getUserEmails = `-- name: GetUserEmails :many
select ue.id, ue.created_at, ue.user_id, ue.email, ue.otp_secret
from user_email ue
     join users u on ue.user_id = u.id
where u.uuid = $1
`

func (q *Queries) GetUserEmails(ctx context.Context, userUuid uuid.UUID) ([]UserEmail, error) {
	rows, err := q.db.Query(ctx, getUserEmails, userUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserEmail
	for rows.Next() {
		var i UserEmail
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.Email,
			&i.OtpSecret,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

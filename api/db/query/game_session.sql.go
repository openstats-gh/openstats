// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: game_session.sql

package query

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createGameSession = `-- name: CreateGameSession :one
with target_game as (
    select id from game where game.uuid = $1
), target_user as (
    select id from users where users.uuid = $2
), target_game_token as (
    select id from game_token where game_token.uuid = $3
)
insert into game_session (game_id, user_id, game_token_id)
select target_game.id, target_user.id, target_game_token.id
from target_game, target_user, target_game_token
returning id, created_at, uuid, game_id, user_id, game_token_id, last_pulse_at
`

type CreateGameSessionParams struct {
	GameUuid      uuid.UUID
	UserUuid      uuid.UUID
	GameTokenUuid uuid.UUID
}

func (q *Queries) CreateGameSession(ctx context.Context, arg CreateGameSessionParams) (GameSession, error) {
	row := q.db.QueryRow(ctx, createGameSession, arg.GameUuid, arg.UserUuid, arg.GameTokenUuid)
	var i GameSession
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Uuid,
		&i.GameID,
		&i.UserID,
		&i.GameTokenID,
		&i.LastPulseAt,
	)
	return i, err
}

const getGameSessionRidCounts = `-- name: GetGameSessionRidCounts :one
with target_user as (
    select count() as user_count from users where users.uuid = $1
), target_session as (
    select last_pulse_at
    from game_session
    where game_session.uuid = $2

), target_game as (
    select count() as game_count from game where game.uuid = $3
), disallow_jwt as (
    select count() as disallow_count from token_disallow_list tdl where tdl.token_id = $4
)
select target_user.user_count, target_session.last_pulse_at, target_game.game_count, disallow_jwt.disallow_count
from target_user, target_session, target_game, disallow_jwt
`

type GetGameSessionRidCountsParams struct {
	UserUuid    uuid.UUID
	SessionUuid uuid.UUID
	GameUuid    uuid.UUID
	TokenUuid   uuid.UUID
}

type GetGameSessionRidCountsRow struct {
	UserCount     int64
	LastPulseAt   time.Time
	GameCount     int64
	DisallowCount int64
}

func (q *Queries) GetGameSessionRidCounts(ctx context.Context, arg GetGameSessionRidCountsParams) (GetGameSessionRidCountsRow, error) {
	row := q.db.QueryRow(ctx, getGameSessionRidCounts,
		arg.UserUuid,
		arg.SessionUuid,
		arg.GameUuid,
		arg.TokenUuid,
	)
	var i GetGameSessionRidCountsRow
	err := row.Scan(
		&i.UserCount,
		&i.LastPulseAt,
		&i.GameCount,
		&i.DisallowCount,
	)
	return i, err
}

const getGameSessionUserProgress = `-- name: GetGameSessionUserProgress :many
select a.slug, ap.progress
from achievement_progress ap
join users u on ap.user_id = u.id
join achievement a on ap.achievement_id = a.id
join game g on a.game_id = g.id
where u.uuid = $1 and g.uuid = $2
`

type GetGameSessionUserProgressParams struct {
	UserUuid uuid.UUID
	GameUuid uuid.UUID
}

type GetGameSessionUserProgressRow struct {
	Slug     string
	Progress int32
}

func (q *Queries) GetGameSessionUserProgress(ctx context.Context, arg GetGameSessionUserProgressParams) ([]GetGameSessionUserProgressRow, error) {
	rows, err := q.db.Query(ctx, getGameSessionUserProgress, arg.UserUuid, arg.GameUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGameSessionUserProgressRow
	for rows.Next() {
		var i GetGameSessionUserProgressRow
		if err := rows.Scan(&i.Slug, &i.Progress); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidSession = `-- name: GetValidSession :one
select gs.last_pulse_at, gt.uuid as game_token_uuid
from game_session gs
    join game_token gt on gs.game_token_id = gt.id
    join game g on gs.game_id = g.id
    join users u on gs.user_id = u.id
where not exists (select token_id, created_at from token_disallow_list tdl where tdl.token_id = $1)
  and g.uuid = $2
  and u.uuid = $3
  and gs.uuid = $4
limit 1
`

type GetValidSessionParams struct {
	SessionTokenUuid uuid.UUID
	GameUuid         uuid.UUID
	UserUuid         uuid.UUID
	SessionUuid      uuid.UUID
}

type GetValidSessionRow struct {
	LastPulseAt   time.Time
	GameTokenUuid uuid.UUID
}

func (q *Queries) GetValidSession(ctx context.Context, arg GetValidSessionParams) (GetValidSessionRow, error) {
	row := q.db.QueryRow(ctx, getValidSession,
		arg.SessionTokenUuid,
		arg.GameUuid,
		arg.UserUuid,
		arg.SessionUuid,
	)
	var i GetValidSessionRow
	err := row.Scan(&i.LastPulseAt, &i.GameTokenUuid)
	return i, err
}

const heartbeatGameSession = `-- name: HeartbeatGameSession :one
update game_session
set last_pulse_at = now()
where uuid = $1
returning last_pulse_at
`

func (q *Queries) HeartbeatGameSession(ctx context.Context, sessionUuid uuid.UUID) (time.Time, error) {
	row := q.db.QueryRow(ctx, heartbeatGameSession, sessionUuid)
	var last_pulse_at time.Time
	err := row.Scan(&last_pulse_at)
	return last_pulse_at, err
}
